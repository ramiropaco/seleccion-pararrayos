import streamlit as st
import math
import pandas as pd
import altair as alt

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="C√°lculo de Selecci√≥n de Pararrayos",
    page_icon="‚ö°",
    layout="wide"
)

st.title("üìä C√°lculo de Selecci√≥n de Pararrayos")
st.subheader("An√°lisis T√©cnico para Subestaciones El√©ctricas")

# Crear columnas para organizar la interfaz
col1, col2 = st.columns([1, 1.5])

with col1:
    st.header("Par√°metros de Entrada")
    
    # Par√°metros del sistema
    st.subheader("Par√°metros del Sistema")
    U_m = st.number_input("Tensi√≥n m√°xima del sistema (U_m) [kV]", 
                         min_value=100.0, max_value=500.0, value=245.0, step=1.0,
                         help="Tensi√≥n m√°xima del sistema en kilovoltios")
    
    K_e = st.number_input("Factor de falla a tierra (K_e)", 
                         min_value=1.0, max_value=2.0, value=1.4, step=0.1,
                         help="Factor de falla a tierra (1.4 para sistema s√≥lidamente puesto a tierra)")
    
    k_d = st.number_input("Factor de dise√±o (k_d)", 
                         min_value=0.5, max_value=0.95, value=0.8, step=0.05,
                         help="Factor de dise√±o t√≠pico de cat√°logos de fabricantes")
    
    k_tov = st.number_input("Capacidad del pararrayos contra sobretensiones temporales (k_TOV)", 
                           min_value=1.0, max_value=1.5, value=1.15, step=0.05,
                           help="Capacidad del pararrayos para sobretensiones temporales de 1s de duraci√≥n")
    
    # Par√°metros de los aisladores
    st.subheader("Par√°metros de los Aisladores")
    num_insulators = st.number_input("N√∫mero de aisladores en la cadena", 
                                    min_value=10, max_value=50, value=23, step=1,
                                    help="Incluyendo 2 extra para contraflameo")
    
    insulator_length = st.number_input("Longitud nominal de un aislador [m]", 
                                      min_value=0.1, max_value=0.5, value=0.146, step=0.001,
                                      format="%.3f",
                                      help="Longitud nominal de un aislador cer√°mico en metros")
    
    sigma = st.number_input("Desviaci√≥n est√°ndar de probabilidad de flameo (œÉ)", 
                           min_value=0.01, max_value=0.1, value=0.03, step=0.01,
                           format="%.2f",
                           help="Desviaci√≥n est√°ndar para la probabilidad de flameo")
    
    # Par√°metros de la l√≠nea
    st.subheader("Par√°metros de la L√≠nea")
    system_voltage = st.number_input("Tensi√≥n del sistema para selecci√≥n de impedancia [kV]", 
                                    min_value=100.0, max_value=500.0, value=245.0, step=1.0,
                                    help="Tensi√≥n del sistema para la selecci√≥n de la impedancia caracter√≠stica")
    
    # La impedancia caracter√≠stica se selecciona autom√°ticamente seg√∫n la tensi√≥n del sistema
    if system_voltage < 145:
        Z_0 = 450
    elif 145 <= system_voltage <= 345:
        Z_0 = 400
    else:
        Z_0 = 350
    
    st.info(f"Impedancia caracter√≠stica (Z_0): {Z_0} Œ© (seleccionada autom√°ticamente seg√∫n la tensi√≥n del sistema)")
    
    U_res = st.number_input("Tensi√≥n residual al impulso tipo rayo [kVp]", 
                           min_value=300, max_value=600, value=452, step=1,
                           help="Tensi√≥n residual al impulso tipo rayo (de cat√°logo)")
    
    line_length = st.number_input("Longitud de la l√≠nea [km]", 
                                 min_value=1.0, max_value=100.0, value=22.94, step=0.1,
                                 help="Longitud de la l√≠nea en kil√≥metros")
    
    v = st.number_input("Velocidad de propagaci√≥n de la onda [km/Œºs]", 
                       min_value=0.2, max_value=0.4, value=0.3, step=0.01,
                       help="Velocidad de propagaci√≥n de la onda (t√≠picamente 0.3 km/Œºs)")
    
    N = st.number_input("N√∫mero de l√≠neas conectadas", 
                       min_value=1, max_value=5, value=1, step=1,
                       help="N√∫mero de l√≠neas conectadas (se asume 1)")
    
    n = st.number_input("N√∫mero de descargas consecutivas", 
                       min_value=1, max_value=5, value=2, step=1,
                       help="N√∫mero de descargas consecutivas (2, seg√∫n IEC)")

# Funciones de c√°lculo
def calculate_cov(U_m):
    """Calcula la tensi√≥n m√°xima de operaci√≥n continua (COV)"""
    return 1.05 * (U_m / math.sqrt(3))

def calculate_tov(cov, K_e):
    """Calcula la m√°xima sobretensi√≥n temporal (TOV)"""
    return K_e * cov

def calculate_rated_voltage(cov, tov, k_d, k_tov):
    """Determina la tensi√≥n nominal del pararrayos"""
    U_r1 = cov / k_d
    U_r2 = tov / k_tov
    return max(U_r1, U_r2), U_r1, U_r2

def normalized_rated_voltage(U_r_theoretical):
    """Selecciona la tensi√≥n nominal normalizada del cat√°logo"""
    # Ejemplo de valores est√°ndar de cat√°logo
    standard_values = [96, 108, 120, 144, 156, 168, 180, 192, 216, 228, 240, 258, 264, 276, 288, 300, 312, 330, 336, 360, 396]
    
    # Seleccionar el valor est√°ndar m√°s cercano por encima del valor te√≥rico
    for value in standard_values:
        if value >= U_r_theoretical:
            return value
    
    # Si no hay un valor adecuado, devolver el √∫ltimo de la lista
    return standard_values[-1]

def calculate_incident_voltage(num_insulators, insulator_length, sigma):
    """Calcula la tensi√≥n incidente con 90% de probabilidad de no flameo"""
    w = num_insulators * insulator_length
    V_50 = 550 * w
    V_i = V_50 * (1 - 1.3 * sigma)
    return V_i, V_50, w

def calculate_discharge_current(V_i, Z_0):
    """Calcula la corriente de descarga"""
    I_d = (2 * V_i) / Z_0
    
    # Seleccionar la corriente nominal est√°ndar
    if I_d <= 5:
        I_d_nominal = 5
    elif I_d <= 10:
        I_d_nominal = 10
    elif I_d <= 20:
        I_d_nominal = 20
    else:
        I_d_nominal = 20  # M√°ximo valor est√°ndar
        
    return I_d, I_d_nominal

def calculate_energy_absorption(V_50, U_res, U_r, Z_0, line_length, v, N, n):
    """Calcula la absorci√≥n de energ√≠a para determinar la clase de descarga de l√≠nea"""
    T_w = line_length / v
    W = (2 * V_50 - N * U_res * (1 + math.log(2 * V_50 / U_res))) * (U_res * T_w * n) / Z_0
    W_prime = W / (U_r * 1000)  # Convertir W a kJ para el c√°lculo de W_prime
    
    # Determinar la clase de descarga de l√≠nea
    if W_prime <= 1:
        discharge_class = 1
    elif W_prime <= 2:
        discharge_class = 2
    elif W_prime <= 3:
        discharge_class = 3
    elif W_prime <= 4:
        discharge_class = 4
    else:
        discharge_class = 5
        
    return W, W_prime, T_w, discharge_class

def estimate_switching_impulse_protection_level(U_r):
    """Estima el nivel de protecci√≥n para el impulso de maniobra (NPM)"""
    # Esta es una estimaci√≥n basada en cat√°logos t√≠picos (aproximadamente 2x la tensi√≥n nominal)
    return round(U_r * 1.85)

# Bot√≥n para realizar los c√°lculos
if st.sidebar.button("Calcular", type="primary"):
    with col2:
        st.header("Resultados de los C√°lculos")
        
        # Crear contenedores ampliables para cada secci√≥n de c√°lculos
        with st.expander("3.11.1 Tensi√≥n m√°xima de operaci√≥n continua (COV)", expanded=True):
            cov = calculate_cov(U_m)
            
            st.markdown(f"""
            **COV = {cov:.2f} kV**
            
            *F√≥rmula:* COV = 1.05 * (U_m / ‚àö3) = 1.05 * ({U_m} / ‚àö3) = {cov:.2f} kV
            
            *Explicaci√≥n:* COV es la tensi√≥n eficaz m√°xima que el pararrayos puede manejar continuamente.
            """)
            
        with st.expander("3.11.2 M√°xima sobretensi√≥n temporal (TOV)", expanded=True):
            tov = calculate_tov(cov, K_e)
            
            st.markdown(f"""
            **TOV = {tov:.2f} kV**
            
            *F√≥rmula:* TOV = K_e * COV = {K_e} * {cov:.2f} = {tov:.2f} kV
            
            *Explicaci√≥n:* TOV considera las sobretensiones temporales, por ejemplo, durante fallas a tierra.
            """)
            
        with st.expander("3.11.3 Tensi√≥n nominal del pararrayos (U_r)", expanded=True):
            U_r_theoretical, U_r1, U_r2 = calculate_rated_voltage(cov, tov, k_d, k_tov)
            
            st.markdown(f"""
            **U_r1 = {U_r1:.2f} kV** (basado en tensi√≥n continua de operaci√≥n)
            
            *F√≥rmula:* U_r1 = COV / k_d = {cov:.2f} / {k_d} = {U_r1:.2f} kV
            
            **U_r2 = {U_r2:.2f} kV** (basado en sobretensiones temporales)
            
            *F√≥rmula:* U_r2 = TOV / k_TOV = {tov:.2f} / {k_tov} = {U_r2:.2f} kV
            
            **Tensi√≥n nominal te√≥rica seleccionada (U_r): {U_r_theoretical:.2f} kV**
            
            *Explicaci√≥n:* U_r es el m√°ximo de U_r1 y U_r2, representando la tensi√≥n nominal del pararrayos.
            """)
            
        with st.expander("3.11.4 Tensi√≥n nominal normalizada del pararrayos", expanded=True):
            U_r = normalized_rated_voltage(U_r_theoretical)
            
            st.markdown(f"""
            **Tensi√≥n nominal normalizada (U_r): {U_r} kV**
            
            *Explicaci√≥n:* La tensi√≥n nominal te√≥rica ({U_r_theoretical:.2f} kV) se redondea al valor est√°ndar m√°s cercano del cat√°logo.
            """)
            
        with st.expander("3.11.5 Tensi√≥n incidente", expanded=True):
            V_i, V_50, w = calculate_incident_voltage(num_insulators, insulator_length, sigma)
            
            st.markdown(f"""
            **Longitud de la cadena de aisladores (w): {w:.3f} m**
            
            *F√≥rmula:* w = {num_insulators} * {insulator_length} = {w:.3f} m
            
            **Tensi√≥n cr√≠tica de flameo (V_50%): {V_50:.2f} kV**
            
            *F√≥rmula:* V_50% = 550 * {w:.3f} = {V_50:.2f} kV
            
            **Tensi√≥n incidente (V_i): {V_i:.2f} kV**
            
            *F√≥rmula:* V_i = {V_50:.2f} * (1 - 1.3 * {sigma}) = {V_i:.2f} kV
            
            *Explicaci√≥n:* V_i es la tensi√≥n con 90% de probabilidad de no flameo.
            """)
            
        with st.expander("3.11.6 Impedancia caracter√≠stica", expanded=True):
            st.markdown(f"""
            **Impedancia caracter√≠stica (Z_0): {Z_0} Œ©**
            
            *Explicaci√≥n:* Z_0 es seleccionada de la tabla IEC 60099-4 para tensi√≥n del sistema {system_voltage} kV.
            """)
            
        with st.expander("3.11.7 Corriente nominal de descarga", expanded=True):
            I_d, I_d_nominal = calculate_discharge_current(V_i, Z_0)
            
            st.markdown(f"""
            **Corriente de descarga calculada (I_d): {I_d:.2f} kAp**
            
            *F√≥rmula:* I_d = (2 * V_i) / Z_0 = (2 * {V_i:.2f}) / {Z_0} = {I_d:.2f} kAp
            
            **Corriente nominal seleccionada (I_d): {I_d_nominal} kAp**
            
            *Explicaci√≥n:* Se elige una corriente nominal de descarga de {I_d_nominal} kAp ya que supera el valor calculado.
            """)
            
        with st.expander("3.11.8 Clase de descarga de l√≠nea", expanded=True):
            W, W_prime, T_w, discharge_class = calculate_energy_absorption(V_50, U_res, U_r, Z_0, line_length, v, N, n)
            
            st.markdown(f"""
            **Tiempo de propagaci√≥n de la onda (T_w): {T_w:.2f} Œºs**
            
            *F√≥rmula:* T_w = {line_length} / {v} = {T_w:.2f} Œºs
            
            **Energ√≠a absorbida (W): {W:.2f} J = {W/1000:.2f} kJ**
            
            *F√≥rmula:* W = [2 * {V_50:.2f} - {N} * {U_res} * (1 + ln(2 * {V_50:.2f} / {U_res}))] * ({U_res} * {T_w:.2f} * {n}) / {Z_0}
            
            **Capacidad de absorci√≥n espec√≠fica (W'): {W_prime:.2f}**
            
            *F√≥rmula:* W' = {W/1000:.2f} / {U_r} = {W_prime:.2f}
            
            *Explicaci√≥n:* W' = {W_prime:.2f} corresponde a la clase de descarga de l√≠nea {discharge_class}.
            """)
        
        # Nivel de protecci√≥n para impulso de maniobra (estimado)
        NPM = estimate_switching_impulse_protection_level(U_r)
            
        # Resumen final
        st.header("Resumen Final de la Selecci√≥n del Pararrayos")
        
        # Crear un DataFrame para mostrar los resultados en una tabla
        summary_data = {
            "Par√°metro": [
                "Tensi√≥n nominal normalizada (U_r)", 
                "Corriente nominal de descarga (I_d)", 
                "Clase de descarga de l√≠nea", 
                "Nivel de protecci√≥n (impulso tipo rayo, NPR)", 
                "Nivel de protecci√≥n (impulso maniobra, NPM)"
            ],
            "Valor": [
                f"{U_r} kV", 
                f"{I_d_nominal} kAp", 
                f"{discharge_class} (basado en W' = {W_prime:.2f})", 
                f"{U_res} kV", 
                f"{NPM} kV (estimado)"
            ]
        }
        
        summary_df = pd.DataFrame(summary_data)
        st.table(summary_df)
        
        # Visualizaci√≥n de datos con Altair
        st.subheader("Visualizaci√≥n de Resultados")
        
        # Gr√°fico de barras para comparar tensiones
        voltage_data = pd.DataFrame({
            'Tipo': ['COV', 'TOV', 'U_r1', 'U_r2', 'U_r', 'V_i'],
            'Tensi√≥n (kV)': [cov, tov, U_r1, U_r2, U_r, V_i]
        })
        
        voltage_chart = alt.Chart(voltage_data).mark_bar().encode(
            x=alt.X('Tipo', sort=None, title='Tipo de Tensi√≥n'),
            y=alt.Y('Tensi√≥n (kV)', title='Tensi√≥n (kV)'),
            color='Tipo',
            tooltip=['Tipo', 'Tensi√≥n (kV)']
        ).properties(
            title='Comparaci√≥n de Tensiones',
            width=600,
            height=400
        )
        
        st.altair_chart(voltage_chart, use_container_width=True)

        # Mostrar informaci√≥n sobre la selecci√≥n del pararrayos
        st.info("""
        **Recomendaci√≥n**: Con base en los resultados obtenidos, se recomienda seleccionar 
        un pararrayos de √≥xido met√°lico con las siguientes caracter√≠sticas:
        """)
        
        col_a, col_b = st.columns(2)
        with col_a:
            st.success(f"üîå **Tensi√≥n nominal**: {U_r} kV")
            st.success(f"‚ö° **Corriente nominal de descarga**: {I_d_nominal} kA")
            st.success(f"üõ°Ô∏è **Clase de descarga de l√≠nea**: {discharge_class}")
        with col_b:
            st.success(f"üîΩ **Nivel de protecci√≥n (rayo)**: {U_res} kV")
            st.success(f"üîÑ **Nivel de protecci√≥n (maniobra)**: {NPM} kV")

else:
    with col2:
        st.info("üëà Verifique los par√°metros de entrada y haga clic en 'Calcular' para ver los resultados.")
        st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Metal_oxide_surge_arrester.svg/800px-Metal_oxide_surge_arrester.svg.png", 
                 caption="Pararrayos de √≥xido met√°lico", width=400)
        
        st.markdown("""
        ### Acerca de esta aplicaci√≥n
        
        Esta herramienta realiza los c√°lculos necesarios para la selecci√≥n adecuada de pararrayos en subestaciones el√©ctricas, 
        siguiendo los procedimientos establecidos por las normas IEC.
        
        El proceso de c√°lculo incluye:
        
        1. Determinaci√≥n de la tensi√≥n m√°xima de operaci√≥n continua (COV)
        2. C√°lculo de la m√°xima sobretensi√≥n temporal (TOV)
        3. Determinaci√≥n de la tensi√≥n nominal del pararrayos (U_r)
        4. Selecci√≥n de la tensi√≥n nominal normalizada
        5. C√°lculo de la tensi√≥n incidente
        6. Selecci√≥n de la impedancia caracter√≠stica
        7. C√°lculo de la corriente nominal de descarga
        8. Determinaci√≥n de la clase de descarga de l√≠nea
        
        Los valores predeterminados corresponden a un caso de estudio para la subestaci√≥n Mazocruz.
        """)

# Informaci√≥n adicional en la barra lateral
with st.sidebar:
    st.header("Informaci√≥n")
    st.markdown("""
    Esta aplicaci√≥n realiza la selecci√≥n t√©cnica de pararrayos para subestaciones el√©ctricas.
    
    Ingrese los par√°metros requeridos o utilice los valores predeterminados.
    
    **Referencias:**
    - IEC 60099-4: Norma para pararrayos
    - IEEE C62.11: Est√°ndar para pararrayos de √≥xido met√°lico para sistemas de CA
    """)
    
    st.markdown("---") 
    st.markdown("¬© 2025 - Aplicaci√≥n para Selecci√≥n de Pararrayos")